buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
  id "java"
}

dependencies {
    implementation 'org.openjdk.jmh:jmh-core:1.37'
    annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
}

repositories {
    mavenCentral()
}

tasks.register("jmh", JavaExec) {
    description 'Executing JMH benchmarks'
    group 'jmh'

    classpath = sourceSets.test.runtimeClasspath
    mainClass.set('org.openjdk.jmh.Main')

    def include = '.*Barrier.*'
    def format = 'json'
    def profilers = project.properties.get('profilers');
    def jvmArgs = project.properties.get('jvmArgs')

    def resultFile = file("build/reports/jmh/result.${format}")

    args include
    //args '-gc', 'true'   // force gc
    args '-foe', 'true'   //fail-on-error
    args '-v', 'NORMAL'   //verbosity [SILENT, NORMAL, EXTRA]
    if (profilers) {
        profilers.split(',').each {
            args '-prof', it
        }
    }
    args '-jvmArgsPrepend', '-server'
    if (jvmArgs) {
        for (jvmArg in jvmArgs.split(' ')) {
            args '-jvmArgsPrepend', jvmArg
        }
    }
    args '-rf', format
    args '-rff', resultFile

    doFirst {
        println "\nExecuting JMH with: $args \n"
        resultFile.parentFile.mkdirs()
    }
}
